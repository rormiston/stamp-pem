#!/usr/bin/python
import os
import numpy as np
from matplotlib import use
use('agg')
import matplotlib.pyplot as plt
from jinja2 import Environment, PackageLoader
from stamp_pem.utils import cohe_color
from collections import OrderedDict
import stamp_pem.selectivequery as sq
from progressbar import ProgressBar, SimpleProgress


# Get jinja environment
env = Environment(loader=PackageLoader('stamp_pem', 'templates'))
env.globals['cohe_color'] = cohe_color

# Collect parameters
params = sq.parse_command_line()
configs = sq.parse_cmd_and_configs(params)
basedir = configs['basedir']
output_dir = configs['output_dir']
darm_channel = configs['darm_channel']
chanlist = configs['channel_list']
jobdur, flag = configs['jobdur'], configs['flag']
st, et = configs['st'], configs['et']
subsystem_list = configs['subsystem_list']
flow, fhigh = configs['flow'], configs['fhigh']
new_df = configs['new_df']
rst = configs['reference_st']
ret = rst + jobdur

# Get the dict of the coherence of each channel of each subsystem
# Add a progress bar since it may take a while
grouped = sq.group_subsystems(chanlist, subsystem_list)
grouped_data = {}
grouped_data_resid = {}

adj_time = sq.adjusted_window(st, et, jobdur)
ref_adj_time = sq.adjusted_window(rst, ret, jobdur)

pbar = ProgressBar(widgets=['Generating interactive plot ', SimpleProgress()],
                   maxval=2 * len(grouped)).start()
position = 0
for key, val in grouped.items():
    grouped_data[key] = {}
    grouped_data_resid[key] = {}
    position += 1
    pbar.update(position)
    for sub_block in val:
        try:
            sys_info = sq.get_subsystem_info(sub_block, basedir, output_dir,
                                             darm_channel, jobdur, adj_time,
                                             flow=flow, fhigh=fhigh,
                                             new_df=new_df)
            grouped_data[key].update(sys_info)
            sys_info_resid = sq.get_subsystem_info(sub_block, basedir,
                                                   output_dir, darm_channel,
                                                   jobdur, adj_time,
                                                   flow=flow, fhigh=fhigh,
                                                   residual=True,
                                                   rst=rst, ret=ret,
                                                   ref_adj_time=ref_adj_time,
                                                   new_df=new_df)
            grouped_data_resid[key].update(sys_info_resid)
        except Exception as error:
            # print(error)
            continue
    position += 1
    pbar.update(position)
pbar.finish()

# Order the channels so the plot sorting makes sense 
ogrouped_data = {}
for k, v in grouped_data.items():
    nv = OrderedDict(sorted(v.items()))
    ogrouped_data[k] = nv
grouped_data = OrderedDict(sorted(ogrouped_data.items()))

ogrouped_data_resid = {}
for k, v in grouped_data_resid.items():
    nv = OrderedDict(sorted(v.items()))
    ogrouped_data_resid[k] = nv
grouped_data_resid = OrderedDict(sorted(ogrouped_data_resid.items()))

# Get necessary names and info for webpage
newsubs = [sub[:-2].replace(':', '') for sub in subsystem_list]
newsubs = sorted(list(set(newsubs)))
d3links = sorted(list(set([ns.strip().replace(' ','_') for ns in newsubs])))
d3names = sorted([n.replace('_', ' ') for n in d3links])
webpage_info = sq.webpage_info(st, et, output_dir, jobdur)
datestrmdy = webpage_info['mdy']
datestrdmy = webpage_info['dmy']
datestrymd = webpage_info['ymd']
webpage_basedir = webpage_info['output_dir']

# write csv  and html file, one (complete) subsystem at a time
d3plots = []
for key in grouped_data.keys():
    file_basename = key.replace(':', '').replace(' ', '_')
    d3plots.append(file_basename)
    filename = file_basename + '.csv'
    PATH = webpage_basedir + '/D3Plots/CoherenceMatrices/'
    PATH_resids = webpage_basedir + '/D3Plots/ResidualMatrices/'
    os.system('mkdir -p {0}'.format(PATH))
    os.system('mkdir -p {0}'.format(PATH_resids))
    fullname = PATH + filename
    fullname_resids = PATH_resids + filename
    with open(fullname, 'w') as csvfile:
        csvfile.write('channel,frequency,coherence\n')
        chans = grouped_data[key].keys()
        chans = map(str, chans)
        cohs = grouped_data[key].values()
        for i in range(len(chans)):
            for j in range(len(cohs[i])):
                csvfile.write('{0},{1},{2}\n'.format(i + 1, j + 1, cohs[i][j]))

    template = env.get_template('d3_subsystems.html')
    f1 = open(('{0}/{1}.html'.format(PATH, file_basename)), 'w')
    print >> f1, template.render(plotTitle=key, flow=flow, fhigh=fhigh,
                                df=new_df, row_number=len(chans),
                                csvfile=filename, chans=chans,
                                datestrymd=datestrymd, datestrdmy=datestrdmy,
                                datestrmdy=datestrmdy, d3plots=d3plots,
                                subsystems=newsubs, d3links=d3links,
                                d3names=d3names, residslinks=d3links,
                                resids=d3names)

    # Now make the interactive residual plots
    with open(fullname_resids, 'w') as csvfile:
        csvfile.write('channel,frequency,coherence\n')
        chans = grouped_data_resid[key].keys()
        chans = map(str, chans)
        cohs = grouped_data_resid[key].values()
        for i in range(len(chans)):
            for j in range(len(cohs[i])):
                csvfile.write('{0},{1},{2}\n'.format(i + 1, j + 1, cohs[i][j]))

    template = env.get_template('d3_residuals.html')
    f1 = open(('{0}/{1}.html'.format(PATH_resids, file_basename)), 'w')
    print >> f1, template.render(plotTitle=key, flow=flow, fhigh=fhigh,
                                df=new_df, row_number=len(chans),
                                csvfile=filename, chans=chans,
                                datestrymd=datestrymd, datestrdmy=datestrdmy,
                                datestrmdy=datestrmdy, d3plots=d3plots,
                                subsystems=newsubs, d3links=d3links,
                                d3names=d3names, residslinks=d3links,
                                resids=d3names, st=rst, et=ret)
