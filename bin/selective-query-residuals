#!/usr/bin/python
import os
import sys
from matplotlib import use
use('agg')
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
import numpy as np
from collections import OrderedDict
from progressbar import (ProgressBar, Percentage, SimpleProgress)
import stamp_pem.selectivequery as sq
from jinja2 import Environment, PackageLoader
from stamp_pem.utils import cohe_color, get_excluded


env = Environment(loader=PackageLoader('stamp_pem', 'templates'))
env.globals['cohe_color'] = cohe_color
excluded = get_excluded()

# Collect parameters
params = sq.parse_command_line()
configs = sq.parse_cmd_and_configs(params)
basedir = configs['basedir']
output_dir = configs['output_dir']
darm_channel = configs['darm_channel']
chanlist = configs['channel_list']
jobdur, flag = configs['jobdur'], configs['flag']
st, et = configs['st'], configs['et']
rst = configs['reference_st']
ret = rst + jobdur
subsystem_list = configs['subsystem_list']
flow, fhigh = configs['flow'], configs['fhigh']
chanlist = configs['channel_list']
plotSNR = configs['plotSNR']

# Adjust start and end times
adj_times_subsys = sq.adjusted_window(st, et, jobdur)
st, et = adj_times_subsys[0], adj_times_subsys[-1]
adj_time_ref = sq.adjusted_window(rst, ret, jobdur)
rst, ret = adj_time_ref[0], adj_time_ref[-1]

# Get webpage info
webpage_info = sq.webpage_info(st, et, output_dir, jobdur)
datestrmdy = webpage_info['mdy']
datestrdmy = webpage_info['dmy']
datestrymd = webpage_info['ymd']
webpage_basedir = webpage_info['output_dir']
PATH = webpage_basedir + '/Residuals_Plots/'
os.system('mkdir -p {0}'.format(PATH))
newsubs = [sub[:-2].replace(':', '') for sub in subsystem_list]
newsubs = sorted(list(set(newsubs)))
d3links = sorted(list(set([ns.strip().replace(' ','_') for ns in newsubs])))
d3names = sorted([n.replace('_', ' ') for n in d3links])

# Loop over given subsystems and make the plots
pbar = ProgressBar(widgets=['Generating residual plot ', SimpleProgress()],
                   maxval=len(subsystem_list)).start()
for i in range(len(subsystem_list)):
    pbar.update(i + 1)
    sub_time1 = sq.read_segs(subsystem_list[i], adj_times_subsys, basedir,
                             output_dir, jobdur, darm_channel)
    sub_ref = sq.read_segs(subsystem_list[i], adj_time_ref, basedir,
                           output_dir, jobdur, darm_channel)
    if sub_time1 is not None:
        sq.plot_residuals(sub_time1, sub_ref, webpage_basedir, st, et, rst, ret,
                          flow=flow, fhigh=fhigh, plotSNR=plotSNR)
pbar.finish()

# Make the html files
grouped = sq.group_subsystems(chanlist, subsystem_list)
grouped = OrderedDict(sorted(grouped.items()))

filenames = []
pagetitles = []
for key in grouped.keys():
    pagetitle =' '.join([word for word in key.split(' ')
                        if len(word) > 2])
    pagetitles.append(pagetitle)
    filename = pagetitle.replace(':', '').replace(' ', '_')
    filenames.append(filename)

filenames = sorted(filenames)
pagetitles = sorted(pagetitles)

for i, key in enumerate(grouped.keys()):
    plotnames = []
    for sub in grouped[key]:
        temp_name = '{0}-{1}_{2}-{3}'.format(st, et, rst, ret)
        ss = ''.join([word[0].upper() for word in sub.split(' ')])
        if "Microphone" in sub:
            ss = ss.replace("PEMM", "PEMMic")
        plotname  = darm_channel.replace(':', '-') + '-' + ss + '_' + temp_name
        plotnames.append(plotname) 

    template = env.get_template('residuals_template.html')
    f1 = open('{0}{1}.html'.format(PATH, filenames[i]), 'w')
    print >> f1, template.render(plots=plotnames,
                                 subsystems=newsubs,
                                 thissubsystem=pagetitles[i],
                                 datestrdmy=datestrdmy,
                                 datestrmdy=datestrmdy,
                                 datestrymd=datestrymd, d3links=d3links,
                                 d3names=d3names, st=rst, et=ret,
                                 resids=filenames,
                                 residslinks=pagetitles)
    f1.close()
